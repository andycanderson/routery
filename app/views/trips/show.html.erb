<h1>show trip</h1>
<p>Trip Name: <%=@trip.name%></p>
<ul>
    <% @locations.each do |location|%>
        <li><%=location.name%></li>
        <li><%=location.description%></li>
        <div class="edit-button">EDIT</div>
        <div class="edit-location">
            <%=form_for location, html: {method: "patch"} do |f|%>
            <%=f.text_field :name, value: location.name%>
            <%=f.text_field :description, value: location.description%>
            <%=f.submit "save changes!", :class => 'submit'%>
            <%= link_to "go to location", location_path(location)%>
            <%= link_to "delete", location_delete_path(location), :method => :delete %>
            <%end%>
        </div>
        <br>
        
    <%end%>

</ul>



    <input id="pac-input" class="controls" type="text" placeholder="Search Box">
    <div id="map-canvas"></div>
    <div id="save-locations">SAVE?</div>

    <div id="trip-locations"></div>

<script>

var passable;
var location_name;
// need to initialize addresses first globally
var addresses = <%=@arr%>;
var names = <%=raw @names.to_json.gsub("</", "<\\/")%>
var descriptions = <%=raw @descriptions.to_json.gsub("</", "<\\/")%>;

var initialize = function(){

    // Hide Save Button at start of search
    $("#save-locations").hide();

    // makes a map for div #map_canvas
    var map = new google.maps.Map(document.getElementById('map-canvas'), {
        mapTypeId: google.maps.MapTypeId.ROADMAP,
        // custom map colors
        styles: mapStyle

    });
  
    // initialize array of markers and info windows
    var pins = [];
    var infowindow = [];
    // loads other coordinates from the same trip
    for (var x = 0; x < addresses.length; x++) 
    {
          var latlng = new google.maps.LatLng(addresses[x][1], addresses[x][0]);
          pins[x] = new google.maps.Marker({
              position: latlng,
              map: map
              });

          var contentString =  '<h1>'+names[x].toString()+'</h1>'+'<p>' + descriptions[x].toString() + '</p>';
          infowindow.push(new google.maps.InfoWindow({
              content: contentString,
              maxWidth: 100
          }));
    }

    // make clusters for markers
    var markerCluster = new MarkerClusterer(map, pins);


    // create function that's executed immediately
    function callInfoWindow(x) {
        return function() {
            infowindow[x].open(map, pins[x]);
        }
    }
    //creates all event listeners
    for(var x = 0; x < pins.length; x++)
    {
        google.maps.event.addListener(pins[x], 'click', callInfoWindow(x));
    }

    // set bounds of the #map_canvas - to contain all points
    // if addresses is empty set default to los angeles else calculate 
    if (addresses.length==0)
    {   
        // sets bounds
        var bounds = new google.maps.LatLngBounds(
        new google.maps.LatLng(33.3889848,-118.4549432),
        new google.maps.LatLng(34.5402925,-117.3614264));
        map.fitBounds(bounds);
    }
    else
    {
        var bounds = new google.maps.LatLngBounds();
        // set bounds of the #map_canvas - to contain all points
        var bounds = new google.maps.LatLngBounds();
        for (i = 0; i < addresses.length; i++)
        {
            bounds.extend( new google.maps.LatLng(addresses[i][1], addresses[i][0]));
        }
        map.fitBounds(bounds);
    }   

      

  // SEARCH FUNCTION
  var input = /** @type {HTMLInputElement} */(
      document.getElementById('pac-input'));

  // specifies where the map should go and pushes the input into controls (array or object)?
  map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

  var searchBox = new google.maps.places.SearchBox((input));
  
  
  // Listen for the event fired when the user selects an item from the
  // pick list. Retrieve the matching places for that item.
  google.maps.event.addListener(searchBox, 'places_changed', function() {
    var places = searchBox.getPlaces();
    // exits addListener if there are no place array is 0
    if (places.length == 0) {
      return;
    }

    // erases previous marker for multiple searches
    if (typeof marker != 'undefined'){ marker.setMap(null) };

    var bounds = new google.maps.LatLngBounds();
    // limit to first search result of places search
    var place = places[0];

    var image = {
      // edit url for custom standardized icons
      url: place.icon,
      size: new google.maps.Size(71, 71),
      origin: new google.maps.Point(0, 0),
      anchor: new google.maps.Point(17, 34),
      scaledSize: new google.maps.Size(25, 25)
    };

    // Create a marker for each place.
    marker = new google.maps.Marker({
      map: map,
      // draggable pins feature
      draggable:true,
      // var image is referred
      icon: image,
      title: place.name,
      position: place.geometry.location
    });


    // DEBUG
    console.log(marker["position"] + " MARKERRR");
    
    location_name = place.name;
    passable = {pin: marker};

    // DEBUG
    console.log(place.name);
    console.log(passable["pin"]["position"]["k"] + " and " + passable["pin"]["position"]["B"]);
    bounds.extend(place.geometry.location);
    console.log(bounds);


    map.fitBounds(bounds);
    map.setZoom(15);

    // show save button
    $("#save-locations").slideDown();
  });

  // Bias the SearchBox results towards places that are within the bounds of the
  // current map's viewport.
  google.maps.event.addListener(map, 'bounds_changed', function() {
    var bounds = map.getBounds();
    searchBox.setBounds(bounds);
  });

  // shows or hides edit forms
$('.edit-button').click(function(){
    $(this).next(".edit-location").toggle();
});
}




$("#save-locations").click(function(){
      console.log("sending");
      console.log(passable["pin"]["position"]["k"] + " and " + passable["pin"]["position"]["B"]);
      
      $.ajax({
      method: "post",
      url: "/add_dropped",
      // the data that is passed via ajax
      data: {locations: {pin: [passable["pin"]["position"]["k"], passable["pin"]["position"]["B"]], name: location_name, trip_id: "<%=@trip_id%>"}},
      dataType: "json",
      success: function(data) {
        // if redirect url exists, redirect
        if(data.url)
        {
          window.location.href = data.url;
        }
        console.log(data.url);
        console.log("works!!!");
      },
      error: function(data)
      {
        console.log("broken");
      }
      });
        
});



$(document).ready(initialize);
$(document).on('page:load', initialize);


</script>