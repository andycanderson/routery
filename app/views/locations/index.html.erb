 <input id="pac-input" class="controls" type="text" placeholder="Search Box">
    <div id="map-canvas"></div>
    <div id="save_locations">SAVE</div>




<script>
// This example adds a search box to a map, using the Google Place Autocomplete
// feature. People can enter geographical searches. The search box will return a
// pick list containing a mix of places and predicted search terms.
var passable;
function initialize() {

// markers to be generated on map
  // var markers = [];

  // makes a map for div #map_canvas
  var map = new google.maps.Map(document.getElementById('map-canvas'), {
    mapTypeId: google.maps.MapTypeId.ROADMAP
  });

  // set bounds of the #map_canvas
  var defaultBounds = new google.maps.LatLngBounds(
      new google.maps.LatLng(-33.8902, 151.1759),
      new google.maps.LatLng(-33.8474, 151.2631));
  map.fitBounds(defaultBounds);

  // Create the search box and link it to the UI element.
  var input = /** @type {HTMLInputElement} */(
      document.getElementById('pac-input'));


  // specifies where the map should go and pushes the input into controls (array or object)?
  map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

  var searchBox = new google.maps.places.SearchBox(
    /** @type {HTMLInputElement} */(input));

 

  // Listen for the event fired when the user selects an item from the
  // pick list. Retrieve the matching places for that item.
  google.maps.event.addListener(searchBox, 'places_changed', function() {
    var places = searchBox.getPlaces();

    // exits addListener if there are no place array is 0
    if (places.length == 0) {
      return;
    }
    // for (var i = 0, marker; marker = markers[i]; i++) {
    //   marker.setMap(null);
    // }

    var bounds = new google.maps.LatLngBounds();
    // limit to first search result of places search
    var place = places[0];

    var image = {
      url: place.icon,
      size: new google.maps.Size(71, 71),
      origin: new google.maps.Point(0, 0),
      anchor: new google.maps.Point(17, 34),
      scaledSize: new google.maps.Size(25, 25)
    };

    // Create a marker for each place.
    marker = new google.maps.Marker({
      map: map,
      icon: image,
      title: place.name,
      position: place.geometry.location
    });

    console.log(marker["position"] + " MARKERRR");
    passable = {pin: marker};
    console.log(passable["pin"]["position"]["k"] + " and " + passable["pin"]["position"]["B"]);
    bounds.extend(place.geometry.location);

    map.fitBounds(bounds);
  });

  // Bias the SearchBox results towards places that are within the bounds of the
  // current map's viewport.
  google.maps.event.addListener(map, 'bounds_changed', function() {
    var bounds = map.getBounds();
    searchBox.setBounds(bounds);
  });
}

google.maps.event.addDomListener(window, 'load', initialize);






  $("#save_locations").click(function(){
      console.log(passable["pin"]["position"]["k"] + " and " + passable["pin"]["position"]["B"]);
      $.ajax({
      method: "post",
      url: "/add_dropped",
      data: {locations: {pin: [passable["pin"]["position"]["k"], passable["pin"]["position"]["B"]]}},
      dataType: "json"
      });
    });
</script>